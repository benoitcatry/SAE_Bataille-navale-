
    BufferedReader consoleIn;
    boolean firstPlayer;
    int numJ1 =0 ; // joueur bateau 1
    int numJ2 =0 ;// bateau du joueur 2
    int count =0;
    boolean quiJouePremier = false;
    int tabCordMissileJ1[][];
    int tabCordMissileJ2[][];
    int levelbot1;
    int levelbot2;
    boolean difficulset1 = false ;
    boolean difficulset2 = false ;


    public BattleShipControler(Model model, View view, boolean f) {
        super(model, view);
        firstPlayer = f;
    }


    public boolean setlevel1(){
        Scanner scan = new Scanner(System.in);
        System.out.println("quelle est le level du bot : 1 Normal \n" +
                "2 difficile");
        do{
            this.levelbot1 = scan.nextInt();
        }while (!((levelbot1==1) ||(levelbot1 == 2)));
        return true;

    }
    public boolean setlevel2(){
        Scanner scan = new Scanner(System.in);
        System.out.println("quelle est le level du bot : 1 Normal \n" +
                "2 difficile");
        do{
            this.levelbot2 = scan.nextInt();
        }while (!((levelbot2==1) ||(levelbot2 == 2)));
        return true;

    }







    public void stageLoop() {
        consoleIn = new BufferedReader(new InputStreamReader(System.in));
        update();
        while(! model.isEndStage()) {
            playTurn();
            endOfTurn();
            update();
        }
        endGame();
    }


    private void playTurn() {
        Player p = model.getCurrentPlayer();
        if(quiJouePremier == false){
            quiJoueEnPremier();

        }
        //il y a du stade a la partie ; la partie 1 ou on pose les bateau | la partie 2 ou on tire
        if(count == 0 || count == 1) { //on pose les bateau
            //verif si bot
            if (p.getType() == Player.COMPUTER) {
                //a modif pour le bot
                System.out.println("COMPUTER PLAYS");
                if(model.getIdPlayer() == 0) {
                    if(difficulset1 == false){
                        difficulset1 = setlevel1();
                    }

                    BattleShipDecider decider = new BattleShipDecider(model, this, 0, levelbot1);
                    count+=decider.placeAllShips(numJ1);
                    numJ1++;
                }else {
                    if(difficulset2 == false){
                        difficulset2 = setlevel2();
                    }
                    BattleShipDecider decider2 = new BattleShipDecider(model, this,1,levelbot2);
                    count+=decider2.placeAllShips(numJ2);
                    System.out.println(numJ2);
                    numJ2++;
                }
            }
            else { // si pas bot alors joueur
                boolean ok = false;

                while (!ok) {
                    System.out.print(p.getName()+ " > ");
                    try {
                        String line = consoleIn.readLine();
                        if (line.length() == 3 || line.length() == 4) {
                            if (model.getIdPlayer() == 0){
                                ok = analyseAndPlayPose(line, numJ1);}
                            else {ok = analyseAndPlayPose(line, numJ2);}

                        }
                        if (!ok) {
                            System.out.println("incorrect instruction. retry !");
                        }
                    }
                    catch(IOException e) {}
                }

            }
        } else if (count == 2) {// partie de la partie 2 donc on tire
            System.out.println("Stade 2 : Feu à volonté ");
            if (p.getType() == Player.COMPUTER) {
                if(model.getIdPlayer() == 0) {
                    BattleShipDecider decider = new BattleShipDecider(model, this, 0, levelbot1);
                    ActionPlayer play = new ActionPlayer(model, this, decider, null);
                    play.start();
                }else {
                    BattleShipDecider decider2 = new BattleShipDecider(model, this,1,levelbot2);
                    ActionPlayer play = new ActionPlayer(model, this, decider2, null);
                    play.start();
                }
            }
            else {
                boolean ok = false;
                while (!ok) {
                    System.out.print(p.getName()+ " > ");
                    try {
                        String line = consoleIn.readLine();
                        if (line.length() == 2 || line.length() == 3) {
                            ok = analyseAndPlay(line);
                        }
                        if (!ok) {
                            System.out.println("incorrect instruction. retry !");
                        }
                    }
                    catch(IOException e) {}
                }
            }
        }
    }





    //row = Y cal =X
    //posse les bateau
    private boolean analyseAndPlayPose(String line, int m) {
        BattleShipStageModel gameStage = (BattleShipStageModel) model.getGameStage();
        char sens = Character.toUpperCase(line.charAt(0));
        if (sens != 'H' && sens != 'V') {return false;}

        int X = (int) (Character.toUpperCase(line.charAt(1)) - 'A');
        int Y = (int) (line.charAt(2) - '1');
        if(line.length()==4){
            if ( line.charAt(2)== '1' &&  line.charAt(3)=='0'){
                Y=9;
            }else{return false;}
        }

        if ((Y<0)||(Y>10)) {return false;}

        if ((X<0)||(X>10)) {return false;}



        if (model.getIdPlayer() == 0) {
            gameStage.ShipPlayer1[m].setCordonnerShip(Y, X,  sens);
            numJ1++;
            /*if (!(gameStage.Verifpeutetreposer(gameStage.getShipsPlayer1(),X,Y,gameStage.ShipPlayer1[m].getTaille(), sens))){
                System.out.println("la bateau est coller a une autre bateau");
                return false;
            }
            else {
                gameStage.ShipPlayer1[m].setCordonnerShip(Y, X,  sens);
                numJ1++;
            }

             */
        }
        if (model.getIdPlayer() == 1) {
            gameStage.ShipPlayer2[m].setCordonnerShip(Y, X, sens);
            numJ2++;
            /*
            if (!(gameStage.Verifpeutetreposer(gameStage.getShipsPlayer2(),X,Y,gameStage.ShipPlayer2[m].getTaille(), sens))){return false;}
            else {
                gameStage.ShipPlayer2[m].setCordonnerShip(Y, X, sens);
                numJ2++;
            }

             */
        }

        if(gameStage.ShipPlayer1.length-1 == m){
            count ++;
            System.out.println(count);
            if(count == 2){numJ1 = 0; numJ2 = 0; tabCordMissileJ1 = new int[gameStage.getMissileJoueur1().length][2]; tabCordMissileJ2 = new int[gameStage.getMissileJoueur2().length][2];}
        }
        return true;

    }

    //tire la bombe
    private boolean analyseAndPlay (String line){
        BattleShipStageModel gameStage = (BattleShipStageModel) model.getGameStage();            // get the pawn value from the first char
        int X = (int) (Character.toUpperCase(line.charAt(0)) - 'A');
        int Y = (int) ((line.charAt(1)) - '1');
        if ((Y<0)||(Y>9)) return false;
        if ((X<0)||(X>9)) return false;
        if(line.length()==3){
            if ((int) line.charAt(1)== 1 && (int) line.charAt(2)==0){
                Y=9;
            }else{return false;}
        }
        ContainerElement tire = null;
        if (model.getIdPlayer() == 0) {
            tire = gameStage.getStockMissileJ1();
        }
        else {
            tire = gameStage.getStockMissileJ2();;
        }
        if (tire.isEmptyAt(0,0)) {return false;}

        if (model.getIdPlayer() == 0) {
            GameElement misile = tire.getElement(0,0);
            if (!gameStage.getBoardPlayer1().canReachCell(Y,X)) {return false;}
            for(int k =0; k<tabCordMissileJ1.length; k++){
                if(tabCordMissileJ1[k][0] == X && tabCordMissileJ1[k][1] == Y){
                    System.out.println("vous avez déja tirée sur ces cordonnée ");
                    return false;}
            }
            if(gameStage.toucheroupas(gameStage.getShipsPlayer2(), X,Y)){
                for(int i = 0; i <gameStage.getMissileJoueur1().length; i++){
                    if (gameStage.getMissileJoueur1()[i] == misile){
                        gameStage.getMissileJoueur1()[i].setColor(2);
                    }
                }
                tabCordMissileJ1[numJ1][0]= X;
                tabCordMissileJ1[numJ1][1]= Y;
                numJ1++;
            }
            ActionList actions = ActionFactory.generatePutInContainer(model, misile, "boardplayer1", Y, X);
            actions.setDoEndOfTurn(true);
            ActionPlayer play = new ActionPlayer(model, this, actions);
            play.start();
            return true;
        }
        else {
            GameElement misile = tire.getElement(0,0);
            if (!gameStage.getBoardPlayer2().canReachCell(Y,X)) {return false;}
            for(int k =0; k<tabCordMissileJ2.length; k++){
                if(tabCordMissileJ2[k][0] == X && tabCordMissileJ2[k][1] == Y){
                    System.out.println("vous avez déja tirée sur ces cordonnée ");
                    return false;}
            }
            if(gameStage.toucheroupas(gameStage.getShipsPlayer1(), X,Y)){
                for(int i = 0; i <gameStage.getMissileJoueur2().length; i++){
                    if (gameStage.getMissileJoueur2()[i] == misile){
                        gameStage.getMissileJoueur2()[i].setColor(2);
                    }
                }
                tabCordMissileJ2[numJ2][0]= X;
                tabCordMissileJ2[numJ2][1]= Y;
                numJ2++;
            }
            ActionList actions = ActionFactory.generatePutInContainer(model, misile, "boardplayer2", Y, X);
            actions.setDoEndOfTurn(true);
            ActionPlayer play = new ActionPlayer(model, this, actions);
            play.start();
            return true;
        }






    }


    //aide pour les méthode anlyseandplay


    public void quiJoueEnPremier(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Qui joue en premier : 1 Joueur 1 \n  " + " 2 Joueur 2\n" + "3 Aleatoire");
        int rep;
        while (true){
            rep = scanner.nextInt();
            if(rep == 1){
                quiJouePremier =true;
                return;
            }
            if(rep == 2){
                model.setNextPlayer();
                quiJouePremier =true;
                return;
            }
            if(rep == 3){
                if(Math.random() > 0.5){ // si > 0.5 joueur 2 si <0.5 joueur 1
                    model.setNextPlayer();
                    quiJouePremier =true;
                    return;
                }else {
                    quiJouePremier =true;
                    return; // car le joueur de basse est le 1
                }
            }
            else {
                System.out.println("Erreur uniquement  1 2 ou 3 sont accepter ");
            }

        }
    }



    public void endOfTurn() {

        model.setNextPlayer();
        // get the new player to display its name
        Player p = model.getCurrentPlayer();
        BattleShipStageModel stageModel = (BattleShipStageModel) model.getGameStage();
        stageModel.getPlayer2Name().setText(p.getName());
    }
