Index: src/control/BattleShipControler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package control;\r\n\r\nimport boardifier.control.ActionFactory;\r\nimport boardifier.control.ActionPlayer;\r\nimport boardifier.control.Controller;\r\nimport boardifier.model.GameElement;\r\nimport boardifier.model.ContainerElement;\r\nimport boardifier.model.Model;\r\nimport boardifier.model.Player;\r\nimport boardifier.model.action.ActionList;\r\nimport boardifier.view.View;\r\nimport model.BattleShipStageModel;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class BattleShipControler extends Controller {\r\n\r\n    BufferedReader consoleIn;\r\n    boolean firstPlayer;\r\n    int stadeDeLaPartie; // si 1 on pose le bateau Si 2 feu a vaulonté\r\n    int modedejeux ; // pour savoir qui joue le bot toujour quand 2\r\n    int count =0;\r\n\r\n    public BattleShipControler(Model model, View view) {\r\n        super(model, view);\r\n        firstPlayer = true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public void stageLoop() {\r\n        consoleIn = new BufferedReader(new InputStreamReader(System.in));\r\n        update();\r\n        while(! model.isEndStage()) {\r\n            playTurn();\r\n            endOfTurn();\r\n            update();\r\n        }\r\n        endGame();\r\n    }\r\n\r\n\r\n    private void playTurn() {\r\n        Player p = model.getCurrentPlayer();\r\n        //verifie si c'est un bot qui joue\r\n        if(stadeDeLaPartie == 1) { //on pose les bateau\r\n            if (p.getType() == Player.COMPUTER) {\r\n                System.out.println(\"COMPUTER PLAYS\");\r\n                BattleShipDecider decider = new BattleShipDecider(model,this);\r\n                ActionPlayer play = new ActionPlayer(model, this, decider, null);\r\n                play.start();\r\n            }\r\n            else {\r\n                boolean ok = false;\r\n                for(int i = 0; i < modedejeux; i++) {\r\n                    while (!ok) {\r\n                    System.out.print(p.getName()+ \" > \");\r\n                    try {\r\n                        String line = consoleIn.readLine();\r\n                        if (line.length() == 3) {\r\n                            ok = analyseAndPlayPose(line, i);\r\n                        }\r\n                        if (!ok) {\r\n                            System.out.println(\"incorrect instruction. retry !\");\r\n                        }\r\n                    }\r\n                    catch(IOException e) {}\r\n                }}\r\n\r\n            }   \r\n        } else if (count == 2) {\r\n            if (p.getType() == Player.COMPUTER) {\r\n                System.out.println(\"COMPUTER PLAYS\");\r\n                BattleShipDecider decider = new BattleShipDecider(model,this);\r\n                ActionPlayer play = new ActionPlayer(model, this, decider, null);\r\n                play.start();\r\n            }\r\n            else {\r\n                boolean ok = false;\r\n                while (!ok) {\r\n                    System.out.print(p.getName()+ \" > \");\r\n                    try {\r\n                        String line = consoleIn.readLine();\r\n                        if (line.length() == 3) {\r\n                            ok = analyseAndPlay(line);\r\n                        }\r\n                        if (!ok) {\r\n                            System.out.println(\"incorrect instruction. retry !\");\r\n                        }\r\n                    }\r\n                    catch(IOException e) {}\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //posse les bateau\r\n    private boolean analyseAndPlayPose(String line, int m) {\r\n        BattleShipStageModel gameStage = (BattleShipStageModel) model.getGameStage();\r\n        char sens = Character.toUpperCase(line.charAt(0));\r\n        if (sens != 'H' && sens != 'V') {return false;}\r\n        int col = (int) Character.toUpperCase((line.charAt(1) - 'A'));\r\n        int row = (int) (line.charAt(2) - '1');\r\n        if ((row<0)||(row>10)) return false;\r\n        if ((col<0)||(col>10)) return false;\r\n        if (model.getIdPlayer() == 0) {\r\n            if (!(gameStage.VerifPasColer(gameStage.getShipsPlayer1(),row,col,gameStage.ShipPlayer1[m].getTaille(), sens))){return false;}\r\n            else {\r\n                gameStage.ShipPlayer1[m].setCordonnerShip(col, row, sens);\r\n            }\r\n        }\r\n        if (model.getIdPlayer() == 1) {\r\n            if (!(gameStage.VerifPasColer(gameStage.getShipsPlayer2(),row,col,gameStage.ShipPlayer2[m].getTaille(), sens))){return false;}\r\n            else {\r\n                gameStage.ShipPlayer2[m].setCordonnerShip(col, row, sens);\r\n            }\r\n        }\r\n        if(gameStage.ShipPlayer1.length == m){\r\n            model.setNextPlayer();\r\n            count ++;\r\n            return true;\r\n        }\r\n        return true;\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        //tire le bouler\r\n        private boolean analyseAndPlay (String line){\r\n            BattleShipStageModel gameStage = (BattleShipStageModel) model.getGameStage();            // get the pawn value from the first char\r\n\r\n            // get the cords in the board\r\n            int col = (int) (line.charAt(1) - 'A');\r\n            int row = (int) (line.charAt(2) - '1');\r\n            // check coords validity\r\n            if ((row<0)||(row>10)) return false;\r\n            if ((col<0)||(col>10)) return false;\r\n            // check if the pawn is still in its pot\r\n            GameElement tire = null;\r\n            if (model.getIdPlayer() == 0) {\r\n                tire = game.getMissileJoueur1();\r\n            }\r\n            else {\r\n                tire = gameStage.getMissilejoueur2();\r\n            }\r\n            if (pot.isEmptyAt(pawnIndex,0)) return false;\r\n            GameElement pawn = pot.getElement(pawnIndex,0);\r\n            // compute valid cells for the chosen pawn\r\n            gameStage.getBoard().setValidCells(pawnIndex+1);\r\n            if (!gameStage.getBoard().canReachCell(row,col)) return false;\r\n\r\n            ActionList actions = ActionFactory.generatePutInContainer(model, pawn, \"holeboard\", row, col);\r\n            actions.setDoEndOfTurn(true); // after playing this action list, it will be the end of turn for current player.\r\n            ActionPlayer play = new ActionPlayer(model, this, actions);\r\n            play.start();\r\n            return true;\r\n\r\n\r\n        }\r\n\r\n\r\n        //aide pour les méthode anlyseandplay\r\n\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/control/BattleShipControler.java b/src/control/BattleShipControler.java
--- a/src/control/BattleShipControler.java	(revision 0a3fbfc2abe81f622019c64db4fe3892da4b2046)
+++ b/src/control/BattleShipControler.java	(date 1715930501850)
@@ -19,8 +19,8 @@
 
     BufferedReader consoleIn;
     boolean firstPlayer;
-    int stadeDeLaPartie; // si 1 on pose le bateau Si 2 feu a vaulonté
-    int modedejeux ; // pour savoir qui joue le bot toujour quand 2
+    int stadeDeLaPartie; // si 1 on pose le bateau Si 2 feu a volonté
+    int modedejeux ; // pour savoir qui joue le bot toujours quand 2
     int count =0;
 
     public BattleShipControler(Model model, View view) {
Index: src/model/BattleBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport boardifier.control.Logger;\r\nimport boardifier.model.GameStageModel;\r\nimport boardifier.model.ContainerElement;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class BattleBoard extends ContainerElement{\r\n\r\n    public BattleBoard(int x, int y, GameStageModel gameStageModel) {\r\n            // call the super-constructor to create a 10x10 grid, named \"holeboard\", and in x,y in space\r\n            super(\"battelBoard\", x, y, 10 , 10, gameStageModel);\r\n        }\r\n\r\n\r\n    public void setValidCells(int number) {\r\n        Logger.debug(\"called\",this);\r\n        resetReachableCells(false);\r\n        List<Point> valid = computeValidCells(number);\r\n        if (valid != null) {\r\n            for(Point p : valid) {\r\n                reachableCells[p.y][p.x] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Point> computeValidCells(int number) {\r\n        List<Point> lst = new ArrayList<>();\r\n        Misille m = null;\r\n        // if the grid is empty, is it the first turn and thus, all cells are valid\r\n        if (isEmpty()) {\r\n            // i are rows\r\n            for(int i=0;i<10;i++) {\r\n                // j are cols\r\n                for (int j = 0; j < 10; j++) {\r\n                    // cols is in x direction and rows are in y direction, so create a point in (j,i)\r\n                    lst.add(new Point(j,i));\r\n                }\r\n            }\r\n            return lst;\r\n        }\r\n        // else, take each empty cell and check if it is valid\r\n        for(int i=0;i<10;i++) {\r\n            for(int j=0;j<10;j++) {\r\n                if (isEmptyAt(i,j)) {\r\n                    // check adjacence in row-1\r\n                    if (i-1 >= 0) {\r\n                        if (j-1>=0) {\r\n                            m = (Misille) getElement(i-1,j-1);\r\n\r\n                            // check if same parity\r\n                            if ((m != null) && ( m.getNumber()%2 == number%2)) {\r\n                                lst.add(new Point(j,i));\r\n                                continue; // go to the next point\r\n                            }\r\n                        }\r\n                        m = (Misille) getElement(i-1,j);\r\n                        // check if different parity\r\n                        if ((m != null) && ( m.getNumber()%2 != number%2)) {\r\n                            lst.add(new Point(j,i));\r\n                            continue; // go to the next point\r\n                        }\r\n                        if (j+1<=2) {\r\n                            m = (Misille) getElement(i-1,j+1);\r\n                            // check if same parity\r\n                            if ((m != null) && ( m.getNumber()%2 == number%2)) {\r\n                                lst.add(new Point(j,i));\r\n                                continue; // go to the next point\r\n                            }\r\n                        }\r\n                    }\r\n                    // check adjacence in row+1\r\n                    if (i+1 <= 2) {\r\n                        if (j-1>=0) {\r\n                            m = (Misille) getElement(i+1,j-1);\r\n                            // check if same parity\r\n                            if ((m != null) && ( m.getNumber()%2 == number%2)) {\r\n                                lst.add(new Point(j,i));\r\n                                continue; // go to the next point\r\n                            }\r\n                        }\r\n                        m = (Misille) getElement(i+1,j);\r\n                        // check if different parity\r\n                        if ((m != null) && ( m.getNumber()%2 != number%2)) {\r\n                            lst.add(new Point(j,i));\r\n                            continue; // go to the next point\r\n                        }\r\n                        if (j+1<=2) {\r\n                            m = (Misille) getElement(i+1,j+1);\r\n                            // check if same parity\r\n                            if ((m != null) && ( m.getNumber()%2 == number%2)) {\r\n                                lst.add(new Point(j,i));\r\n                                continue; // go to the next point\r\n                            }\r\n                        }\r\n                    }\r\n                    // check adjacence in row\r\n                    if (j-1>=0) {\r\n                        m = (Misille) getElement(i,j-1);\r\n                        // check if different parity\r\n                        if ((m != null) && ( m.getNumber()%2 != number%2)) {\r\n                            lst.add(new Point(j,i));\r\n                            continue; // go to the next point\r\n                        }\r\n                    }\r\n                    if (j+1<=2) {\r\n                        m = (Misille) getElement(i,j+1);\r\n                        // check if different parity\r\n                        if ((m != null) && ( m.getNumber()%2 != number%2)) {\r\n                            lst.add(new Point(j,i));\r\n                            continue; // go to the next point\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return lst;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    public BattleBoard getGet() {\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/BattleBoard.java b/src/model/BattleBoard.java
--- a/src/model/BattleBoard.java	(revision 0a3fbfc2abe81f622019c64db4fe3892da4b2046)
+++ b/src/model/BattleBoard.java	(date 1715870099948)
@@ -27,7 +27,7 @@
         }
     }
 
-    public List<Point> computeValidCells(int number) {
+    /*public List<Point> computeValidCells(int number) {
         List<Point> lst = new ArrayList<>();
         Misille m = null;
         // if the grid is empty, is it the first turn and thus, all cells are valid
@@ -114,6 +114,82 @@
                             continue; // go to the next point
                         }
 
+                    }
+                }
+            }
+        }
+        return lst;
+    } */
+    public List<Point> computeValidCells(int n) {
+        List<Point> lst = new ArrayList<>();
+        Misille m = null;
+        if (isEmpty()) {
+            for(int i = 0; i < 10; i++) {
+                for (int j = 0; j < 10; j++) {
+                    lst.add(new Point(j, i));
+                }
+            }
+            return lst;
+        }
+
+        for(int i = 0; i < 10; i++) {
+            for(int j = 0; j < 10; j++) {
+                if (isEmptyAt(i, j)) {
+                    if (i - 1 >= 0) {
+                        if (j - 1 >= 0) {
+                            m = (Misille) getElement(i - 1, j - 1);
+                            if (m != null && m.getColor() == n) {
+                                lst.add(new Point(j, i));
+                                continue;
+                            }
+                        }
+                        m = (Misille) getElement(i - 1, j);
+                        if (m != null && m.getColor() == n) {
+                            lst.add(new Point(j, i));
+                            continue;
+                        }
+                        if (j + 1 <= 2) {
+                            m = (Misille) getElement(i - 1, j + 1);
+                            if (m != null && m.getColor() == n) {
+                                lst.add(new Point(j, i));
+                                continue;
+                            }
+                        }
+                    }
+                    if (i + 1 <= 2) {
+                        if (j - 1 >= 0) {
+                            m = (Misille) getElement(i + 1, j - 1);
+                            if (m != null && m.getColor() == n) {
+                                lst.add(new Point(j, i));
+                                continue;
+                            }
+                        }
+                        m = (Misille) getElement(i + 1, j);
+                        if (m != null && m.getColor() == n) {
+                            lst.add(new Point(j, i));
+                            continue;
+                        }
+                        if (j + 1 <= 2) {
+                            m = (Misille) getElement(i + 1, j + 1);
+                            if (m != null && m.getColor() == n) {
+                                lst.add(new Point(j, i));
+                                continue;
+                            }
+                        }
+                    }
+                    if (j - 1 >= 0) {
+                        m = (Misille) getElement(i, j - 1);
+                        if (m != null && m.getColor() == n) {
+                            lst.add(new Point(j, i));
+                            continue;
+                        }
+                    }
+                    if (j + 1 <= 2) {
+                        m = (Misille) getElement(i, j + 1);
+                        if (m != null && m.getColor() == n) {
+                            lst.add(new Point(j, i));
+                            continue;
+                        }
                     }
                 }
             }
@@ -125,6 +201,7 @@
 
 
 
+
     public BattleBoard getGet() {
         return this;
     }
Index: SAE_Bataille-navale.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Test\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SAE_Bataille-navale.iml b/SAE_Bataille-navale.iml
--- a/SAE_Bataille-navale.iml	(revision 0a3fbfc2abe81f622019c64db4fe3892da4b2046)
+++ b/SAE_Bataille-navale.iml	(date 1715930501848)
@@ -9,4 +9,7 @@
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
+  <component name="SonarLintModuleSettings">
+    <option name="uniqueId" value="bfa166c4-4edb-41bc-b63a-540d43564eb8" />
+  </component>
 </module>
\ No newline at end of file
Index: src/boardifier/control/Decider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package boardifier.control;\r\n\r\nimport boardifier.model.action.ActionList;\r\nimport boardifier.model.Model;\r\n\r\npublic abstract class Decider {\r\n    protected Model model;\r\n    protected Controller control;\r\n\r\n    public Decider(Model model, Controller control) {\r\n        this.model = model;\r\n        this.control = control;\r\n    }\r\n\r\n    public abstract ActionList decide();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/boardifier/control/Decider.java b/src/boardifier/control/Decider.java
--- a/src/boardifier/control/Decider.java	(revision 0a3fbfc2abe81f622019c64db4fe3892da4b2046)
+++ b/src/boardifier/control/Decider.java	(date 1715930501849)
@@ -2,6 +2,9 @@
 
 import boardifier.model.action.ActionList;
 import boardifier.model.Model;
+import model.BattleBoard;
+import model.BattleShipStageFactory;
+import model.BattleShipStageModel;
 
 public abstract class Decider {
     protected Model model;
@@ -14,3 +17,4 @@
 
     public abstract ActionList decide();
 }
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1ae606cc-c7ee-4439-bac4-d266b9487482\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/control/BattleShipControler.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/control/BattleShipControler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/model/BattleBoard.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/model/BattleBoard.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/model/BattleShipStageFactory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/model/BattleShipStageFactory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/model/BattleShipStageModel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/model/BattleShipStageModel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/model/Cell.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/model/Misille.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/model/Ship.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/model/Ship.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2fui06HPhhYAIiVld7iSNQqUFlF\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/home/benoit/Documents/hhh/HoleConsole&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1ae606cc-c7ee-4439-bac4-d266b9487482\" name=\"Changes\" comment=\"\" />\r\n      <created>1714657139962</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1714657139962</updated>\r\n      <workItem from=\"1714657141468\" duration=\"1103000\" />\r\n      <workItem from=\"1714940634428\" duration=\"5621000\" />\r\n      <workItem from=\"1714979536527\" duration=\"2472000\" />\r\n      <workItem from=\"1714985650652\" duration=\"2382000\" />\r\n      <workItem from=\"1714995785437\" duration=\"4342000\" />\r\n      <workItem from=\"1715003632064\" duration=\"2127000\" />\r\n      <workItem from=\"1715067851817\" duration=\"6793000\" />\r\n      <workItem from=\"1715082201161\" duration=\"10325000\" />\r\n      <workItem from=\"1715439453596\" duration=\"2684000\" />\r\n      <workItem from=\"1715543453838\" duration=\"2705000\" />\r\n      <workItem from=\"1715663410574\" duration=\"1881000\" />\r\n      <workItem from=\"1715670533089\" duration=\"5721000\" />\r\n      <workItem from=\"1715753268731\" duration=\"3380000\" />\r\n      <workItem from=\"1715859428731\" duration=\"1040000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0a3fbfc2abe81f622019c64db4fe3892da4b2046)
+++ b/.idea/workspace.xml	(date 1715930501848)
@@ -6,12 +6,10 @@
   <component name="ChangeListManager">
     <list default="true" id="1ae606cc-c7ee-4439-bac4-d266b9487482" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SAE_Bataille-navale.iml" beforeDir="false" afterPath="$PROJECT_DIR$/SAE_Bataille-navale.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/boardifier/control/Decider.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/boardifier/control/Decider.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/control/BattleShipControler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/control/BattleShipControler.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/model/BattleBoard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/BattleBoard.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/model/BattleShipStageFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/BattleShipStageFactory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/model/BattleShipStageModel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/BattleShipStageModel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/model/Cell.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/Misille.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/model/Ship.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/Ship.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -73,17 +71,22 @@
       <workItem from="1714995785437" duration="4342000" />
       <workItem from="1715003632064" duration="2127000" />
       <workItem from="1715067851817" duration="6793000" />
-      <workItem from="1715082201161" duration="10325000" />
-      <workItem from="1715439453596" duration="2684000" />
-      <workItem from="1715543453838" duration="2705000" />
-      <workItem from="1715663410574" duration="1881000" />
-      <workItem from="1715670533089" duration="5721000" />
-      <workItem from="1715753268731" duration="3380000" />
-      <workItem from="1715859428731" duration="1040000" />
+      <workItem from="1715082201161" duration="4864000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
